/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iotsimulator.GUI;

import java.awt.Color;
import java.lang.reflect.InvocationTargetException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author user
 */
public class TestingArena extends javax.swing.JFrame {

    int numSensors=2000;
    
    ChartPanel chartPanel;
    XYSeries firstSeries;
    JFreeChart chart;
    ArrayList<IncommingDatum> incommingData = new ArrayList();
    
    ArrayList<IncommingDatum> incommingDataArray[] = new ArrayList[numSensors];
    
    Timer genTimer;
    Timer chartTimer;
    int timeValue = 0;
    int timeValueArray[] = new int[numSensors];
    boolean isBlockedRefreshTimer = false;

    /**
     * Creates new form TestingArena
     */
    public TestingArena() {
        initComponents();
        DecimalFormat decimalFormat = new DecimalFormat("##.00");
        double testValue = 2.425674734894004;
        jLabel2.setText(String.valueOf(decimalFormat.format(testValue)));
        XYPlot xYPlot = new XYPlot();
        XYSeriesCollection xYDataset = new XYSeriesCollection();
        firstSeries = new XYSeries("Testing");

        for (int i = 0; i < 100; i++) {
            firstSeries.add(i, Math.random(), true);
        }

        xYDataset.addSeries(firstSeries);
        //xYPlot.setDataset(xYDataset);
        chart = ChartFactory.createXYLineChart("Test", "x", "y", xYDataset);
        chartPanel = new ChartPanel(chart);
        chartPanel.setBounds(0, 0, jPanel1.getWidth(), jPanel1.getHeight());

        jPanel1.add(chartPanel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Test data:");

        jLabel2.setText("Val");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentResized
        // TODO add your handling code here:
        chartPanel.setBounds(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
    }//GEN-LAST:event_jPanel1ComponentResized

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        timeValue = 0;
        genTimer = new Timer();
        genTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                int bufferSize = 500;
                if (incommingData.size() == bufferSize) {
                    incommingData.remove(0);
                    incommingData.add(new IncommingDatum(timeValue, Math.random()));
                    timeValue = timeValue + 1;
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                } else if (incommingData.size() < bufferSize) {
                    incommingData.add(new IncommingDatum(timeValue, Math.random()));
                    timeValue = timeValue + 1;
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                } else if (incommingData.size() > bufferSize) {
                    for (int i = 0; incommingData.size() < bufferSize; i++) {
                        incommingData.remove(i);
                    }
                    incommingData.remove(0);
                    incommingData.add(new IncommingDatum(timeValue, Math.random()));
                    timeValue = timeValue + 1;
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                }
//                double timeWasting=0;
//                for(int i=0;i<90000000;i++)
//                {
//                    timeWasting=timeWasting+Math.sin(Math.random());
//                }
            }
        }, 1000, 10);

        Timer wastingThreads[] = new Timer[1000];
        for (int i = 0; i < 1000; i++) {
            wastingThreads[i] = new Timer();
            incommingDataArray[i]=new ArrayList();
            final int passing_i=i;
            wastingThreads[i].schedule(new TimerTask() {
                @Override
                public void run() {
                int bufferSize = 500;
                if (incommingDataArray[passing_i].size() == bufferSize) {
                    incommingDataArray[passing_i].remove(0);
                    incommingDataArray[passing_i].add(new IncommingDatum(timeValueArray[passing_i], Math.random()));
                    timeValueArray[passing_i] = timeValueArray[passing_i] + 1;
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                } else if (incommingDataArray[passing_i].size() < bufferSize) {
                    incommingDataArray[passing_i].add(new IncommingDatum(timeValueArray[passing_i], Math.random()));
                    timeValueArray[passing_i] = timeValueArray[passing_i] + 1;
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                } else if (incommingDataArray[passing_i].size() > bufferSize) {
                    for (int i = 0; incommingDataArray[passing_i].size() < bufferSize; i++) {
                        incommingDataArray[passing_i].remove(i);
                    }
                    incommingDataArray[passing_i].remove(0);
                    incommingDataArray[passing_i].add(new IncommingDatum(timeValueArray[passing_i], Math.random()));
                    timeValueArray[passing_i] = timeValueArray[passing_i] + 1;
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                }
//                double timeWasting=0;
//                for(int i=0;i<90000000;i++)
//                {
//                    timeWasting=timeWasting+Math.sin(Math.random());
//                }
            }
            }, Math.round(Math.random()*1000 + 1000), 5);
        }

        chartTimer = new Timer();
        chartTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                if (isBlockedRefreshTimer == false) {
                    isBlockedRefreshTimer = true;

                    firstSeries.clear();
                    for (int i = 0; i < incommingData.size() - 1; i++) {
                        firstSeries.add(incommingData.get(i).time, incommingData.get(i).value);
                    }
                    Runnable refresh = new Runnable() {
                        @Override
                        public void run() {
                            chart.setNotify(true);
                            chart.fireChartChanged();
                            chart.setNotify(false);
                        }
                    };
                    try {
                        SwingUtilities.invokeAndWait(refresh);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(TestingArena.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvocationTargetException ex) {
                        Logger.getLogger(TestingArena.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    isBlockedRefreshTimer = false;
                }

            }
        }, 1000, 100);
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
//                for (int j = 0; j < 1000; j++) {
//                    int init = firstSeries.getItemCount();
//                    if(init==100)
//                    {
//                        for (int i = init; i < 100; i++) {
//                            firstSeries.add(i, Math.random(), true);
//                            firstSeries.remove(0);
//                        }
//                    }else{
//                        for (int i = init; i < 100; i++) {
//                            firstSeries.add(i, Math.random(), true);
//                            firstSeries.remove(0);
//                        }
//                    }
//                    
//                    chart.fireChartChanged();
//                }

                chart.setNotify(false);

                Runnable refresh = new Runnable() {
                    @Override
                    public void run() {
                        chart.setNotify(true);
                        chart.fireChartChanged();
                    }
                };

                int time = (int) Math.round(firstSeries.getMaxX());
                for (int j = 0; j < 1000; j++) {
                    int init = firstSeries.getItemCount();
                    if (init == 100) {
                        firstSeries.remove(0);
                        firstSeries.add(time + 1, Math.random());
                        SwingUtilities.invokeLater(refresh);
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                    } else if (init < 100) {
                        firstSeries.add(time + 1, Math.random());
                        SwingUtilities.invokeLater(refresh);
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                    } else {
                        for (int i = 0; firstSeries.getItemCount() < 100; i++) {
                            firstSeries.remove(i);
                        }
                        firstSeries.remove(0);
                        firstSeries.add(time + 1, Math.random());
                        SwingUtilities.invokeLater(refresh);
//                        if (chart.isNotify() == false) {
//                            chart.fireChartChanged();
//                        }
                    }
                    time = time + 1;
                }

//                jPanel1.invalidate();
//                jPanel1.repaint();
            }
        });

//        thread.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        genTimer.cancel();
        chartTimer.cancel();
    }//GEN-LAST:event_jButton2ActionPerformed

    public class IncommingDatum {

        public int time;
        public double value;

        IncommingDatum(int passed_time, double passed_value) {
            time = passed_time;
            value = passed_value;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestingArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestingArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestingArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestingArena.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestingArena().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
