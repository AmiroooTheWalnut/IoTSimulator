/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iotsimulator.GUI;

import iotsimulator.IOTSimulator;
import iotsimulator.Structure.DataExchange;
import iotsimulator.Structure.FrequencySolution;
import iotsimulator.Structure.Metric;
import iotsimulator.Structure.TriggerCombination;
import iotsimulator.Structure.TriggerState;
import java.util.ArrayList;

/**
 *
 * @author user
 */
public class TestingArenaSingleThread extends javax.swing.JDialog {

    IOTSimulator parent;

    /**
     * Creates new form TestingArenaSingleThread
     */
    public TestingArenaSingleThread(IOTSimulator passed_parent, java.awt.Frame parentFrame, boolean modal) {
        super(parentFrame, modal);
        initComponents();
        parent = passed_parent;
        metricList.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return parent.metricManager.selectedMetrics.size();
            }

            @Override
            public Object getElementAt(int index) {
                return parent.metricManager.selectedMetrics.get(index).name;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        oneStepButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        metricList = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        initButton = new javax.swing.JButton();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        devicesList = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Data index:");

        jLabel2.setText("Time:");

        jLabel3.setText("0");

        oneStepButton.setText("One step");
        oneStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneStepButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("0");

        jLabel5.setText("Current sensor value:");

        jLabel6.setText("Empty");

        jLabel7.setText("Predicted sensor values:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable2);

        jLabel8.setText("Real values:");

        jButton3.setText("Predict values");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Number of future time to predict:");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jButton4.setText("Set weights");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        metricList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        metricList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                metricListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(metricList);

        jLabel10.setText("Select metrics:");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(jTable3);

        initButton.setText("Init");
        initButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initButtonActionPerformed(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));
        jSpinner2.setEnabled(false);

        jLabel11.setText("Step size (millisecond):");

        devicesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        devicesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                devicesListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(devicesList);

        jLabel12.setText("Select device:");

        jButton1.setText("UpdateGUI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Triggers' status:");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable4.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane6.setViewportView(jTable4);

        jLabel14.setText("Prediction trigger's status:");

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable5.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane7.setViewportView(jTable5);

        jButton2.setText("Test Cplex");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(768, 768, 768))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6)
                                    .addComponent(jScrollPane7)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel14))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(initButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oneStepButton)
                                .addGap(80, 80, 80)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel9)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oneStepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(initButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                TriggerState triggerStateArray[] = new TriggerState[parent.triggerMonitor.triggers.size()];
                boolean needsModelBeSolved = false;
                for (int i = 0; i < parent.triggerMonitor.triggers.size(); i++) {
                    TriggerState triggerState = parent.triggerMonitor.triggers.get(i).isSensingTriggered();
                    triggerStateArray[i] = triggerState;
                    if (triggerState.isActivated) {
                        needsModelBeSolved = true;
                    } else if (triggerState.isDeactivated) {
                        needsModelBeSolved = true;
                    }
                    if (needsModelBeSolved == true) {
                        TriggerCombination problem = new TriggerCombination(triggerStateArray);
                        FrequencySolution solution = parent.solutionStorageManager.getSolution(problem);
                        if (solution == null) {
                            for (int k = 0; k < parent.metricManager.selectedMetrics.size(); k++) {
                                if (parent.metricManager.selectedMetrics.get(k).interpolationBuffer.size() > 0) {
                                    DataExchange message = parent.metricManager.selectedMetrics.get(k).interpolationBuffer.get(0);
                                    parent.metricManager.setMetricWeights(problem);
                                }
                            }
                        }
                    }
                }

//                double correlation[][] = parent.metricManager.getCorrelationMatrix();
//                for (int i = 0; i < correlation.length; i++) {
//                    for (int j = 0; j < correlation[0].length; j++) {
//                        System.out.print(correlation[i][j] + "||");
//                    }
//                    System.out.println();
//                }
            }
        }
        );
        thread.start();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void initButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initButtonActionPerformed
        // TODO add your handling code here:
        parent.timeController.initDevices(parent.topologyDefinition.topology);
        devicesList.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return parent.timeController.allDevices.size();
            }

            @Override
            public Object getElementAt(int index) {
                return parent.timeController.allDevices.get(index).name;
            }
        });

        parent.timeController.currentTime = 0;
    }//GEN-LAST:event_initButtonActionPerformed

    private void oneStepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneStepButtonActionPerformed
        // TODO add your handling code here:
//        currentTime = currentTime + (int) jSpinner2.getValue();
        int selectedDevice = devicesList.getSelectedIndex();
        int selectedMetric = metricList.getSelectedIndex();
        if (selectedDevice > -1 && selectedMetric > -1) {
            parent.timeController.currentTime = parent.timeController.currentTime + (int) parent.timeController.allDevices.get(selectedDevice).metrics.get(selectedMetric).frequency;
            parent.timeController.sense(selectedDevice, selectedMetric, parent.metricManager);
            jLabel3.setText(String.valueOf(parent.timeController.currentTime));
        }
        updateGUI();
    }//GEN-LAST:event_oneStepButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int selectedDevice = devicesList.getSelectedIndex();
        int selectedMetric = metricList.getSelectedIndex();
        int numPredictionSteps = (int) jSpinner1.getValue();
        if (selectedDevice > -1 && selectedMetric > -1) {
            parent.timeController.predict(selectedDevice, parent.triggerPredictor, numPredictionSteps);
        }
//        String test[][]=new String[1][1];
//        test[0][0]="FFF";
//        String testC[]=new String[1];
//        testC[0]="FFFFFF";
//        jTable1.setModel(new javax.swing.table.DefaultTableModel(test, testC));
        updateGUI();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void devicesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_devicesListValueChanged
        // TODO add your handling code here:
        int selectedDevice = devicesList.getSelectedIndex();
        if (selectedDevice > -1) {
            metricList.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return parent.timeController.allDevices.get(selectedDevice).metrics.size();
                }

                @Override
                public Object getElementAt(int index) {
                    return parent.timeController.allDevices.get(selectedDevice).metrics.get(index).name;
                }
            });
        }
    }//GEN-LAST:event_devicesListValueChanged

    private void metricListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_metricListValueChanged
        // TODO add your handling code here:
        updateGUI();
    }//GEN-LAST:event_metricListValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        updateGUI();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        parent.optimizer.testCplex();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void updateGUI() {
        int selectedDevice = devicesList.getSelectedIndex();
        int selectedMetric = metricList.getSelectedIndex();
        if (selectedDevice > -1 && selectedMetric > -1) {
            Metric targetMetric = parent.timeController.allDevices.get(selectedDevice).metrics.get(selectedMetric);
            String data[][] = new String[1][targetMetric.interpolationBuffer.size()];

            for (int j = 0; j < targetMetric.interpolationBuffer.size(); j++) {
                data[0][j] = String.valueOf(targetMetric.interpolationBuffer.get(j).message);
            }

            String columns[] = new String[targetMetric.interpolationBuffer.size()];

            for (int i = 0; i < columns.length; i++) {
                columns[i] = String.valueOf(targetMetric.interpolationBuffer.get(i).time);
            }

            jTable2.setModel(new javax.swing.table.DefaultTableModel(data, columns));

            String dataPrediction[][] = new String[1][targetMetric.predictedBuffer.size()];

            for (int j = 0; j < targetMetric.predictedBuffer.size(); j++) {
                dataPrediction[0][j] = String.valueOf(targetMetric.predictedBuffer.get(j).message);
            }

            String columnsPrediction[] = new String[targetMetric.predictedBuffer.size()];

            for (int i = 0; i < columnsPrediction.length; i++) {
                columnsPrediction[i] = String.valueOf(targetMetric.predictedBuffer.get(i).time);
            }

            jTable1.setModel(new javax.swing.table.DefaultTableModel(dataPrediction, columnsPrediction));

            String dataTrigger[][] = new String[1][parent.triggerMonitor.triggers.size()];

            for (int j = 0; j < parent.triggerMonitor.triggers.size(); j++) {
                dataTrigger[0][j] = String.valueOf(parent.triggerMonitor.triggers.get(j).isTriggerActive);
            }

            String columnsTrigger[] = new String[parent.triggerMonitor.triggers.size()];

            for (int i = 0; i < columnsTrigger.length; i++) {
                columnsTrigger[i] = String.valueOf(parent.triggerMonitor.triggers.get(i).name);
            }

            jTable4.setModel(new javax.swing.table.DefaultTableModel(dataTrigger, columnsTrigger));

            String dataPTrigger[][] = new String[1][parent.triggerMonitor.triggers.size()];

            for (int j = 0; j < parent.triggerMonitor.triggers.size(); j++) {
                dataPTrigger[0][j] = String.valueOf(parent.triggerMonitor.triggers.get(j).isTriggerActive);
            }

            String columnsPTrigger[] = new String[parent.triggerMonitor.triggers.size()];

            for (int i = 0; i < columnsPTrigger.length; i++) {
                columnsPTrigger[i] = String.valueOf(parent.triggerMonitor.triggers.get(i).name);
            }

            jTable5.setModel(new javax.swing.table.DefaultTableModel(dataPTrigger, columnsPTrigger));

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> devicesList;
    private javax.swing.JButton initButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JList<String> metricList;
    private javax.swing.JButton oneStepButton;
    // End of variables declaration//GEN-END:variables
}
