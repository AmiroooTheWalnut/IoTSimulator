/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iotsimulator.GUI;

import iotsimulator.Structure.Metric;
import java.awt.Color;
import java.lang.reflect.InvocationTargetException;
import java.text.DecimalFormat;
import java.util.TimerTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;

import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author user
 */
public class SimulationRunDialog extends javax.swing.JDialog {

    MainFrame parent;

    ChartPanel chartPanel;
    DefaultCategoryDataset resourceDataset;
    XYSeries metricDataset;
    JFreeChart deviceChart;
    JFreeChart metricChart;

    boolean isBlockedRefreshTimer;

    /**
     * Creates new form SimulationRunDialog
     */
    public SimulationRunDialog(java.awt.Frame passed_parent, boolean modal) {
        super(passed_parent, modal);
        initComponents();
        parent = (MainFrame) passed_parent;
        initOverviewPanel();
        initDeviceMonitorPanel();
        initMetricMonitorPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        simulationTimeLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        memoryLabel = new javax.swing.JLabel();
        bandwidthLabel = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jSlider3 = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        storageLabel = new javax.swing.JLabel();
        jSlider4 = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        cPULabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("Simulation time:");

        simulationTimeLabel.setText("0");

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(simulationTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(simulationTimeLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Devices:");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 169, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel7.add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Metrics:");

        jList2.setEnabled(false);
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 171, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel7.add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jSlider1.setEnabled(false);

        jLabel3.setText("Bandwidth:");

        jLabel4.setText("Memory:");

        memoryLabel.setText("Val");

        bandwidthLabel.setText("Val");

        jSlider2.setEnabled(false);

        jSlider3.setEnabled(false);

        jLabel7.setText("Storage:");

        storageLabel.setText("Val");

        jSlider4.setEnabled(false);

        jLabel9.setText("CPU:");

        cPULabel.setText("Val");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bandwidthLabel))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(memoryLabel))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(storageLabel))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cPULabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSlider4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(bandwidthLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(memoryLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(storageLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(cPULabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.add(jPanel3);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Triggers happened:");

        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jPanel7.add(jPanel6);

        jTabbedPane1.addTab("Overview", jPanel7);

        jList4.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList4ValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(jList4);

        jLabel10.setText("Metric:");

        jPanel13.setLayout(new java.awt.GridLayout());

        jList5.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList5ValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(jList5);

        jLabel11.setText("Device:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                            .addComponent(jScrollPane7))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Metric monitor", jPanel11);

        jList3.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList3ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jList3);

        jLabel8.setText("Device:");

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Device monitor", jPanel9);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 936, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Prediction monitor", jPanel12);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 936, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Predictioned triggers monitor", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        int selectedDeviceIndex = jList1.getSelectedIndex();
        if (selectedDeviceIndex > -1) {
            refreshOverviewPanel(selectedDeviceIndex);
            jList2.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).metrics.size();
                }

                @Override
                public Object getElementAt(int index) {
                    return parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).metrics.get(index).name;
                }
            });
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jButton1.getText().equals("Start")) {
            ScheduledThreadPoolExecutor timer = new ScheduledThreadPoolExecutor(1);
            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    if (parent.iOTSimulator.timeController.isActive == false) {
                        jButton1.setText("Start");
                        timer.shutdownNow();
                    } else {
                        simulationTimeLabel.setText(String.valueOf(parent.iOTSimulator.timeController.currentTime));

                        if (jPanel7.isVisible() == true) {
                            int selectedDeviceIndex = jList1.getSelectedIndex();
                            if (selectedDeviceIndex > -1) {
                                refreshOverviewPanel(selectedDeviceIndex);
                            }
                        }
                        if (jPanel9.isVisible() == true) {
                            int selectedDeviceIndex = jList3.getSelectedIndex();
                            if (selectedDeviceIndex > -1) {
                                refreshDeviceMonitorPanel(selectedDeviceIndex);
                            }
                        }
                        if (jPanel11.isVisible() == true) {
                            int selectedDeviceIndex = jList5.getSelectedIndex();
                            if (selectedDeviceIndex > -1) {
                                int selectedMetricIndex = jList4.getSelectedIndex();
                                if (selectedMetricIndex > -1) {
                                    Metric metric = parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).metrics.get(selectedMetricIndex);
                                    refreshMetricMonitorPanel(metric);
                                }
                            }
                        }
                    }
                }
            }, 2000, 1000,TimeUnit.MILLISECONDS);
            parent.iOTSimulator.timeController.start(parent.iOTSimulator.topologyDefinition.topology, parent.iOTSimulator.metricManager);
            jButton1.setText("Pause");
        } else if (jButton1.getText().equals("Resume")) {
            parent.iOTSimulator.timeController.resume(parent.iOTSimulator.metricManager);
            jButton1.setText("Pause");
        } else if (jButton1.getText().equals("Pause")) {
            parent.iOTSimulator.timeController.pause();
            jButton1.setText("Resume");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void initOverviewPanel() {
        jList1.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return parent.iOTSimulator.timeController.allDevices.size();
            }

            @Override
            public Object getElementAt(int index) {
                return parent.iOTSimulator.timeController.allDevices.get(index).name;
            }
        });
    }

    public void initDeviceMonitorPanel() {
        jList3.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return parent.iOTSimulator.timeController.allDevices.size();
            }

            @Override
            public Object getElementAt(int index) {
                return parent.iOTSimulator.timeController.allDevices.get(index).name;
            }
        });

        resourceDataset = new DefaultCategoryDataset();
        deviceChart = ChartFactory.createBarChart3D("Resource usage", "Device name", "Usage", resourceDataset);
//        ValueAxis a = ((org.jfree.chart.plot.CategoryPlot)chart.getPlot()).getRangeAxis();
//        a.setAutoRange(false);
//        a.setUpperBound(WIDTH);
        ((org.jfree.chart.plot.CategoryPlot) deviceChart.getPlot()).getRangeAxis().setUpperBound(100);//IMPORTANT TO CHANGE.
//        ((org.jfree.chart.plot.CategoryPlot)chart.getPlot()).setRangeAxis();
        ChartPanel panel = new ChartPanel(deviceChart);
        jPanel10.add(panel);
    }

    public void initMetricMonitorPanel() {
        jList5.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return parent.iOTSimulator.timeController.allDevices.size();
            }

            @Override
            public Object getElementAt(int index) {
                return parent.iOTSimulator.timeController.allDevices.get(index).name;
            }
        });

        metricDataset = new XYSeries("Metric value");
        XYSeriesCollection xYDataset = new XYSeriesCollection();
        xYDataset.addSeries(metricDataset);
        metricChart = ChartFactory.createXYLineChart("Metric value", "Time", "Value", xYDataset);
        ChartPanel panel = new ChartPanel(metricChart);
        jPanel13.add(panel);
    }

    public void refreshDeviceMonitorPanel(int selectedDeviceIndex) {
        if (isBlockedRefreshTimer == false) {
            isBlockedRefreshTimer = true;

            resourceDataset.clear();
            resourceDataset.addValue(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedBandWidth, "Bandwidth usage", parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).name);
            resourceDataset.addValue(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedCPU, "CPU usage", parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).name);
            resourceDataset.addValue(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedMemory, "Memory usage", parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).name);
            resourceDataset.addValue(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedStorage, "Storage usage", parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).name);
            Runnable refresh = new Runnable() {
                @Override
                public void run() {
                    ((org.jfree.chart.plot.CategoryPlot) deviceChart.getPlot()).getRangeAxis().setUpperBound(100);//IMPORTANT TO CHANGE.
                    deviceChart.setNotify(true);
                    deviceChart.fireChartChanged();
                    deviceChart.setNotify(false);
                }
            };
            try {
                if (SwingUtilities.isEventDispatchThread() == true) {
                    refresh.run();
                } else {
                    SwingUtilities.invokeAndWait(refresh);
                }

            } catch (InterruptedException ex) {
                Logger.getLogger(TestingArena.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvocationTargetException ex) {
                Logger.getLogger(TestingArena.class.getName()).log(Level.SEVERE, null, ex);
            }
            isBlockedRefreshTimer = false;
        }
    }

    public void refreshMetricMonitorPanel(Metric metric) {
        if (isBlockedRefreshTimer == false) {
            isBlockedRefreshTimer = true;

            metricDataset.clear();
            try {
                for (int i = 0; i < metric.predictionBuffer.size() - 1; i++) {
                    metricDataset.add(metric.predictionBuffer.get(i).time, Double.valueOf(metric.predictionBuffer.get(i).message));
                }
            } catch (Exception e) {
                System.out.println("Problem in generating xy data. Potentially, the message is not number.");
            }
            Runnable refresh = new Runnable() {
                @Override
                public void run() {
                    metricChart.setNotify(true);
                    metricChart.fireChartChanged();
                    metricChart.setNotify(false);
                }
            };
            try {
                if (SwingUtilities.isEventDispatchThread() == true) {
                    refresh.run();
                } else {
                    SwingUtilities.invokeAndWait(refresh);
                }

            } catch (InterruptedException ex) {
                Logger.getLogger(TestingArena.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvocationTargetException ex) {
                Logger.getLogger(TestingArena.class.getName()).log(Level.SEVERE, null, ex);
            }
            isBlockedRefreshTimer = false;
        }
    }

    public void refreshOverviewPanel(int selectedDeviceIndex) {
        if (isBlockedRefreshTimer == false) {
            isBlockedRefreshTimer = true;

            DecimalFormat decimalFormat = new DecimalFormat("##.00");
            bandwidthLabel.setText(String.valueOf(decimalFormat.format(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedBandWidth)));
            cPULabel.setText(String.valueOf(decimalFormat.format(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedCPU)));
            memoryLabel.setText(String.valueOf(decimalFormat.format(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedMemory)));
            storageLabel.setText(String.valueOf(decimalFormat.format(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedStorage)));
//            jTextPane1.setText(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).signalConsole.toString());
            jTextPane2.setText(parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).triggerConsole.toString());

            int bandwidth = (int) ((parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedBandWidth / parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).CPUCapacity) * 100);
            jSlider1.setValue(bandwidth);
            if (bandwidth > 90) {
                jSlider1.setBackground(Color.red);
            } else {
                jSlider1.setBackground(Color.gray);
            }

            int memory = (int) ((parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedMemory / parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).memoryCapacity) * 100);
            jSlider2.setValue(memory);
            if (memory > 90) {
                jSlider2.setBackground(Color.red);
            } else {
                jSlider2.setBackground(Color.gray);
            }

            int storage = (int) ((parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedStorage / parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).storageCapacity) * 100);
            jSlider3.setValue(storage);
            if (storage > 90) {
                jSlider3.setBackground(Color.red);
            } else {
                jSlider3.setBackground(Color.gray);
            }

            int cpu = (int) ((parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).usedCPU / parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).CPUCapacity) * 100);
            jSlider4.setValue(cpu);
            if (cpu > 90) {
                jSlider4.setBackground(Color.red);
            } else {
                jSlider4.setBackground(Color.gray);
            }

            isBlockedRefreshTimer = false;
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton1.setText("Start");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList3ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList3ValueChanged
        // TODO add your handling code here:
        int selectedDeviceIndex = jList3.getSelectedIndex();
        if (selectedDeviceIndex > -1) {
            refreshDeviceMonitorPanel(selectedDeviceIndex);
        }
    }//GEN-LAST:event_jList3ValueChanged

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        for (int i = 0; i < jTabbedPane1.getComponents().length; i++) {
            jTabbedPane1.getComponents()[0].setVisible(false);
        }
        jTabbedPane1.getComponents()[jTabbedPane1.getSelectedIndex()].setVisible(true);
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jList5ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList5ValueChanged
        // TODO add your handling code here:
        int selectedDeviceIndex = jList5.getSelectedIndex();
        if (selectedDeviceIndex > -1) {
            jList4.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).metrics.size();
                }

                @Override
                public Object getElementAt(int index) {
                    return parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).metrics.get(index).name;
                }
            });
        }
    }//GEN-LAST:event_jList5ValueChanged

    private void jList4ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList4ValueChanged
        // TODO add your handling code here:
        int selectedDeviceIndex = jList5.getSelectedIndex();
        if (selectedDeviceIndex > -1) {
            int selectedMetricIndex = jList4.getSelectedIndex();
            if (selectedMetricIndex > -1) {
                Metric metric = parent.iOTSimulator.timeController.allDevices.get(selectedDeviceIndex).metrics.get(selectedMetricIndex);
                refreshMetricMonitorPanel(metric);
            }
        }
    }//GEN-LAST:event_jList4ValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bandwidthLabel;
    private javax.swing.JLabel cPULabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList4;
    private javax.swing.JList<String> jList5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JLabel memoryLabel;
    private javax.swing.JLabel simulationTimeLabel;
    private javax.swing.JLabel storageLabel;
    // End of variables declaration//GEN-END:variables
}
